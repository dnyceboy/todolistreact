{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleEdit","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","value","name","toggleTodo","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","createTodo","uuid","placeholder","TodoList","todos","create","remove","edit","toggleCompleted","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WA+DeA,G,kBA3DX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,WAAW,EACXC,KAAM,EAAKH,MAAMG,MAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAVN,E,4EAadK,KAAKV,MAAMW,WAAWD,KAAKV,MAAMY,M,mCAGjCF,KAAKG,SAAS,CAACX,WAAYQ,KAAKT,MAAMC,c,iCAE/BY,GACPA,EAAIC,iBAEJL,KAAKV,MAAMgB,WAAWN,KAAKV,MAAMY,GAAIF,KAAKT,MAAME,MAChDO,KAAKG,SAAS,CAACX,WAAW,M,mCAEjBY,GAAK,IAAD,EACSA,EAAIG,OAAnBC,EADM,EACNA,MAAOC,EADD,EACCA,KACdT,KAAKG,SAAL,eACKM,EAAOD,M,mCAGHJ,GACTJ,KAAKV,MAAMoB,WAAWV,KAAKV,MAAMY,M,+BAwBjC,OApBGF,KAAKT,MAAMC,UAEN,yBAAKmB,UAAU,QACX,0BAAMA,UAAU,iBAAiBC,SAAUZ,KAAKF,YAC5C,2BAAOe,KAAK,OAAOL,MAAOR,KAAKT,MAAME,KAAMgB,KAAK,OAAOK,SAAUd,KAAKH,eACtE,0CAMR,yBAAKc,UAAU,QACX,wBAAIA,UAAWX,KAAKV,MAAMyB,UAAY,sBAAwB,YAAaC,QAAShB,KAAKD,cAAgBC,KAAKV,MAAMG,MACpH,6BACI,4BAAQuB,QAAShB,KAAKJ,YAAtB,QACA,4BAAQoB,QAAShB,KAAKN,cAAtB,W,GAnDLuB,c,iBCqCJC,G,kBAnCX,WAAY5B,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CAACE,KAAM,IACpB,EAAKI,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKwB,aAAe,EAAKA,aAAaxB,KAAlB,gBAJN,E,0EAMLS,GAAK,IAAD,EACSA,EAAIG,OAAnBC,EADM,EACNA,MAAOC,EADD,EACCA,KACdT,KAAKG,SAAL,eACKM,EAAOD,M,mCAGHJ,GACTA,EAAIC,iBACJL,KAAKV,MAAM8B,WAAX,eAA0BpB,KAAKT,MAA/B,CAAsCW,GAAImB,MAAQN,WAAW,KAC7Df,KAAKG,SAAS,CAACV,KAAM,O,+BAGrB,OACI,0BAAMkB,UAAU,cAAcC,SAAUZ,KAAKmB,cACzC,2CACA,2BACIN,KAAK,OACLS,YAAY,WACZpB,GAAG,OACHO,KAAK,OACLD,MAAOR,KAAKT,MAAME,KAClBqB,SAAUd,KAAKH,eAEnB,qD,GA9BUoB,cCsDXM,G,kBApDX,WAAYjC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CAAEiC,MAAO,IACtB,EAAKC,OAAS,EAAKA,OAAO9B,KAAZ,gBACd,EAAK+B,OAAS,EAAKA,OAAO/B,KAAZ,gBACd,EAAKgC,KAAO,EAAKA,KAAKhC,KAAV,gBACZ,EAAKiC,gBAAkB,EAAKA,gBAAgBjC,KAArB,gBANT,E,oEAQXkC,GACH7B,KAAKG,SAAS,CACVqB,MAAM,GAAD,mBAAMxB,KAAKT,MAAMiC,OAAjB,CAAwBK,Q,6BAG9B3B,GACHF,KAAKG,SAAS,CACVqB,MAAOxB,KAAKT,MAAMiC,MAAMM,QAAO,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,S,2BAGhDA,EAAI8B,GACL,IAAMC,EAAejC,KAAKT,MAAMiC,MAAMU,KAAI,SAAAC,GACtC,OAAGA,EAAKjC,KAAOA,EACJ,eAAIiC,EAAX,CAAiB1C,KAAMuC,IAEpBG,KAEXnC,KAAKG,SAAS,CAACqB,MAAOS,M,sCAEV/B,GACZ,IAAM+B,EAAejC,KAAKT,MAAMiC,MAAMU,KAAI,SAAAC,GACtC,OAAGA,EAAKjC,KAAOA,EACJ,eAAIiC,EAAX,CAAiBpB,WAAYoB,EAAKpB,YAE/BoB,KAEXnC,KAAKG,SAAS,CAACqB,MAAOS,M,+BAEjB,IAAD,OACET,EAAQxB,KAAKT,MAAMiC,MAAMU,KAAI,SAAAC,GAC/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKjC,GAAIA,GAAIiC,EAAKjC,GAAIT,KAAM0C,EAAK1C,KAAMsB,UAAWoB,EAAKpB,UAAWd,WAAY,EAAKyB,OAAQpB,WAAY,EAAKqB,KAAMjB,WAAY,EAAKkB,qBAEzJ,OACI,yBAAKjB,UAAU,YACX,0CAAe,kDACf,4BACKa,EACD,kBAAC,EAAD,CAAaJ,WAAYpB,KAAKyB,e,GA9C3BR,cCSRoB,G,uLARX,OACE,6BACE,kBAAC,EAAD,W,GAJUC,IAAMrB,YCQJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9d1456b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Todo.css\"\r\n\r\nclass Todo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n    handleRemove(){\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n    toggleForm(){\r\n        this.setState({isEditing: !this.state.isEditing})\r\n    }\r\n    handleEdit(evt){\r\n        evt.preventDefault();\r\n\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({isEditing: false})\r\n    }\r\n    handleChange(evt){\r\n        const {value, name} = evt.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    handleToggle(evt){\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n    render(){\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleEdit}>\r\n                        <input type=\"text\" value={this.state.task} name=\"task\" onChange={this.handleChange} />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <li className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"} onClick={this.handleToggle} >{this.props.task}</li>\r\n                    <div>\r\n                        <button onClick={this.toggleForm}>Edit</button>\r\n                        <button onClick={this.handleRemove}>X</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {task: \"\"};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt){\r\n        const {value, name} = evt.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createTodo({...this.state, id: uuid(), completed: false});\r\n        this.setState({task: \"\"})\r\n    }\r\n    render(){\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label>New Todo</label>\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"New Todo\" \r\n                    id=\"task\"    \r\n                    name=\"task\"\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button>Add New Todo</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTodoForm;","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport \"./TodoList.css\";\r\n\r\nclass TodoList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { todos: [] };\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.edit = this.edit.bind(this);\r\n        this.toggleCompleted = this.toggleCompleted.bind(this);\r\n    }\r\n    create(newTodo){\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        })\r\n    }\r\n    remove(id){\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        })\r\n    }\r\n    edit(id, updatedTask){\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return {...todo, task: updatedTask}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({todos: updatedTodos})\r\n    }\r\n    toggleCompleted(id){\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return {...todo, completed: !todo.completed}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({todos: updatedTodos})\r\n    }\r\n    render(){\r\n        const todos = this.state.todos.map(todo => {\r\n            return <Todo key={todo.id} id={todo.id} task={todo.task} completed={todo.completed} removeTodo={this.remove} updateTodo={this.edit} toggleTodo={this.toggleCompleted} />\r\n        })\r\n        return(\r\n            <div className=\"TodoList\">\r\n                <h1>Todo List! <span>React Todo List</span></h1>\r\n                <ul>\r\n                    {todos}\r\n                    <NewTodoForm createTodo={this.create} />\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from \"./TodoList\";\nimport './App.css';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}